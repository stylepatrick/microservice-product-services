spring:
  application:
    name: composite-product

server.forward-headers-strategy: framework

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
  responseCodes:
    ok: OK
    badRequest: Bad Request, invalid format of the request. See response message for more information
  product-composite:
    get:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Base product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        
        ## Product id 113
        200 - Ok, but no recommendations will be returned
        
        ## Product id 213
        200 - Ok, but no reviews will be returned
    create:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.
    delete:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.


springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: stylepatrick
  pathsToMatch: /**

  swagger-ui:
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
  oAuthFlow:
    authorizationUrl: http://mps.internal/auth/realms/${APP_KEYCLOAK_REALM}/protocol/openid-connect/auth
    tokenUrl: http://mps.internal/auth/realms/${APP_KEYCLOAK_REALM}/protocol/openid-connect/token

spring.security.oauth2.resourceserver.jwt.issuer-uri: http://mps.internal/auth/realms/${APP_KEYCLOAK_REALM}

spring.cloud.stream:
  defaultBinder: kafka
  bindings:
    products-out-0:
      destination: products
      producer:
        required-groups: auditGroup
    recommendations-out-0:
      destination: recommendations
      producer:
        required-groups: auditGroup
    reviews-out-0:
      destination: reviews
      producer:
        required-groups: auditGroup

resilience4j.timelimiter:
  instances:
    productDto:
      timeoutDuration: 2s

resilience4j.retry:
  instances:
    productDto:
      maxAttempts: 3
      waitDuration: 1000

management.health.circuitbreakers.enabled: true

# CircuitBreak checks the last 5 events, if 50% of them fails it will be set to open, after that it waits 10s in open state until it changes to half-open
# After 3 events are successfully it will get back to closed.
resilience4j.circuitbreaker:
  instances:
    productDto:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true