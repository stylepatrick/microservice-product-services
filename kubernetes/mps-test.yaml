# Source: dev-env/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-credentials
  labels:
    app.kubernetes.io/name: mongodb-credentials
    helm.sh/chart: dev-env-1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: YWRtaW4=
  SPRING_DATA_MONGODB_PASSWORD: bW9uZ29kYi1wd2QtZGV2
  SPRING_DATA_MONGODB_USERNAME: bW9uZ29kYi11c2VyLWRldg==
---
# Source: dev-env/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-server-credentials
  labels:
    app.kubernetes.io/name: mongodb-server-credentials
    helm.sh/chart: dev-env-1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  MONGO_INITDB_ROOT_PASSWORD: bW9uZ29kYi1wd2QtZGV2
  MONGO_INITDB_ROOT_USERNAME: bW9uZ29kYi11c2VyLWRldg==
---
# Source: dev-env/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-credentials
  labels:
    app.kubernetes.io/name: mysql-credentials
    helm.sh/chart: dev-env-1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  SPRING_DATASOURCE_PASSWORD: bXlzcWwtcHdkLWRldg==
  SPRING_DATASOURCE_USERNAME: bXlzcWwtdXNlci1kZXY=
---
# Source: dev-env/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-server-credentials
  labels:
    app.kubernetes.io/name: mysql-server-credentials
    helm.sh/chart: dev-env-1.0.0
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  MYSQL_DATABASE: cmV2aWV3LWRi
  MYSQL_PASSWORD: bXlzcWwtcHdkLWRldg==
  MYSQL_ROOT_PASSWORD: cm9vdHB3ZA==
  MYSQL_USER: bXlzcWwtdXNlci1kZXY=
---
# Source: dev-env/charts/product-composite/templates/configmap_from_file.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-composite
  labels:
    app.kubernetes.io/name: product-composite
    helm.sh/chart: product-composite-1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: ""
  product-composite.yml: ""
---
# Source: dev-env/charts/product/templates/configmap_from_file.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: product
  labels:
    app.kubernetes.io/name: product
    helm.sh/chart: product-1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: ""
  product.yml: ""
---
# Source: dev-env/charts/recommendation/templates/configmap_from_file.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: recommendation
  labels:
    app.kubernetes.io/name: recommendation
    helm.sh/chart: recommendation-1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: ""
  recommendation.yml: ""
---
# Source: dev-env/charts/review/templates/configmap_from_file.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: review
  labels:
    app.kubernetes.io/name: review
    helm.sh/chart: review-1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: ""
  review.yml: ""
---
# Source: dev-env/charts/mongodb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 27017
  selector:
    app.kubernetes.io/name: mongodb
---
# Source: dev-env/charts/mysql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3306
  selector:
    app.kubernetes.io/name: mysql
---
# Source: dev-env/charts/product-composite/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: product-composite
  labels:
    app.kubernetes.io/name: product-composite
    helm.sh/chart: product-composite-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: product-composite
---
# Source: dev-env/charts/product/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: product
  labels:
    app.kubernetes.io/name: product
    helm.sh/chart: product-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: product
---
# Source: dev-env/charts/recommendation/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: recommendation
  labels:
    app.kubernetes.io/name: recommendation
    helm.sh/chart: recommendation-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: recommendation
---
# Source: dev-env/charts/review/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: review
  labels:
    app.kubernetes.io/name: review
    helm.sh/chart: review-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: review
---
# Source: dev-env/charts/zipkin-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: zipkin-server
  labels:
    app.kubernetes.io/name: zipkin-server
    helm.sh/chart: zipkin-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9411
  selector:
    app.kubernetes.io/name: zipkin-server
---
# Source: dev-env/charts/mongodb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
    spec:
      containers:
        - name: mongodb
          image: "registry.hub.docker.com/library/mongo:8.0.0-rc13"
          imagePullPolicy: IfNotPresent
          envFrom:
          - secretRef:
              name: mongodb-server-credentials
          ports:
            - containerPort: 27017
          resources:
            limits:
              memory: 350Mi
---
# Source: dev-env/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: mysql
    helm.sh/chart: mysql-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
    spec:
      containers:
        - name: mysql
          image: "registry.hub.docker.com/library/mysql:9.0.1"
          imagePullPolicy: IfNotPresent
          envFrom:
          - secretRef:
              name: mysql-server-credentials
          ports:
            - containerPort: 3306
          resources:
            limits:
              memory: 512Mi
---
# Source: dev-env/charts/product-composite/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-composite
  labels:
    app.kubernetes.io/name: product-composite
    helm.sh/chart: product-composite-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: product-composite
  template:
    metadata:
      labels:
        app.kubernetes.io/name: product-composite
    spec:
      containers:
        - name: product-composite
          image: "hands-on/composite-product:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_CONFIG_LOCATION
            value: file:/config-repo/application.yml,file:/config-repo/product-composite.yml
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
          volumeMounts:
          - name: product-composite
            mountPath: /config-repo
      volumes:
        - name: product-composite
          configMap:
            name: product-composite
---
# Source: dev-env/charts/product/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product
  labels:
    app.kubernetes.io/name: product
    helm.sh/chart: product-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: product
  template:
    metadata:
      labels:
        app.kubernetes.io/name: product
    spec:
      containers:
        - name: product
          image: "hands-on/product:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_CONFIG_LOCATION
            value: file:/config-repo/application.yml,file:/config-repo/product.yml
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: mongodb-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
          volumeMounts:
          - name: product
            mountPath: /config-repo
      volumes:
        - name: product
          configMap:
            name: product
---
# Source: dev-env/charts/recommendation/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendation
  labels:
    app.kubernetes.io/name: recommendation
    helm.sh/chart: recommendation-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: recommendation
  template:
    metadata:
      labels:
        app.kubernetes.io/name: recommendation
    spec:
      containers:
        - name: recommendation
          image: "hands-on/recommendation:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_CONFIG_LOCATION
            value: file:/config-repo/application.yml,file:/config-repo/recommendation.yml
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: mongodb-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
          volumeMounts:
          - name: recommendation
            mountPath: /config-repo
      volumes:
        - name: recommendation
          configMap:
            name: recommendation
---
# Source: dev-env/charts/review/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: review
  labels:
    app.kubernetes.io/name: review
    helm.sh/chart: review-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: review
  template:
    metadata:
      labels:
        app.kubernetes.io/name: review
    spec:
      containers:
        - name: review
          image: "hands-on/review:latest"
          imagePullPolicy: Never
          env:
          - name: SPRING_CONFIG_LOCATION
            value: file:/config-repo/application.yml,file:/config-repo/review.yml
          - name: SPRING_PROFILES_ACTIVE
            value: docker
          envFrom:
          - secretRef:
              name: mysql-credentials
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/health/liveness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 350Mi
          volumeMounts:
          - name: review
            mountPath: /config-repo
      volumes:
        - name: review
          configMap:
            name: review
---
# Source: dev-env/charts/zipkin-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin-server
  labels:
    app.kubernetes.io/name: zipkin-server
    helm.sh/chart: zipkin-server-1.0.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zipkin-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zipkin-server
    spec:
      containers:
        - name: zipkin-server
          image: "registry.hub.docker.com/openzipkin/zipkin:2.24.0"
          imagePullPolicy: IfNotPresent
          env:
          - name: STORAGE_TYPE
            value: mem
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /actuator/info
              port: 9411
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 9411
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 9411
          resources:
            limits:
              memory: 512Mi
---
# Source: dev-env/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-dev-env
  labels:
    app.kubernetes.io/name: dev-env
    helm.sh/chart: dev-env-1.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/issuer: selfsigned
spec:
  tls:
    - hosts:
        - "localhost"
      secretName: tls-certificate
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /product-composite
            pathType: Prefix
            backend:
              service:
                name: product-composite
                port:
                  name: http
          - path: /actuator/health
            pathType: Prefix
            backend:
              service:
                name: product-composite
                port:
                  name: http
          - path: /openapi
            pathType: Prefix
            backend:
              service:
                name: product-composite
                port:
                  name: http
          - path: /webjars
            pathType: Prefix
            backend:
              service:
                name: product-composite
                port:
                  name: http