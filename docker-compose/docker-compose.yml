version: '3.9'

services:
  mongodb:
    image: mongo:8.0.0-rc13
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - 27017:27017
    command: mongod
    volumes:
      - microservice-mongo-data:/data/db
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 2s
      retries: 60

  mysql:
    image: mysql:9.0.1
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: rootpwd
      MYSQL_DATABASE: review-db
      MYSQL_USER: user
      MYSQL_PASSWORD: pwd
    volumes:
      - microservice-mysql-data:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 60

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.7.0
    deploy:
      resources:
        limits:
          memory: 512M
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      #Required if services are started in Debug mode
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_started

  keycloak-postgres:
    restart: always
    image: postgres:13.16
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      PGDATA: /var/lib/postgresql/data/keycloak-pg-data
    deploy:
      resources:
        limits:
          memory: 2048M
    volumes:
      - keycloak-pg-data:/var/lib/postgresql/data/keycloak-pg-data

  keycloak:
    restart: always
    image: quay.io/keycloak/keycloak:25.0.2
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HTTP_RELATIVE_PATH: /auth
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: [ "start-dev" ]
    deploy:
      resources:
        limits:
          memory: 2024M
    ports:
      - 8989:8080
    depends_on:
      - keycloak-postgres

  eureka-server:
    build: spring-cloud/eureka-server
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      APP_EUREKA_USERNAME: u
      APP_EUREKA_PASSWORD: p

  config-server:
    build: spring-cloud/config-server
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      SPRING_PROFILES_ACTIVE: native
      ENCRYPT_KEY: my-secret-key
      APP_CONFIG_SERVER_USERNAME: u
      APP_CONFIG_SERVER_PASSWORD: p
      APP_EUREKA_SERVER: eureka-server
      APP_EUREKA_USERNAME: u
      APP_EUREKA_PASSWORD: p
    volumes:
      - C:\Users\patrick.oberkofler\Documents\GitHub\microservice-product-services\config-repo:/config-repo

  zipkin-server:
    image: openzipkin/zipkin:3.4
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      STORAGE_TYPE: mem
    ports:
      - 9411:9411

  gateway:
    build: spring-cloud/gateway
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      APP_EUREKA_SERVER: eureka-server
      APP_EUREKA_USERNAME: u
      APP_EUREKA_PASSWORD: p
      APP_KEYCLOAK_SERVER: host.docker.internal:8989
      APP_KEYCLOAK_REALM: mps
      APP_CONFIG_SERVER_SERVER: config-server
    ports:
      - 8080:8080
    depends_on:
      config-server:
        condition: service_started

  product:
    build: product
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      MONGO_PRODUCT_URL: mongodb
      MONGO_PRODUCT_DATABASE: product-db
      KAFKA_BROKER: kafka
      KAFKA_PORT: 9092
      APP_EUREKA_SERVER: eureka-server
      APP_EUREKA_USERNAME: u
      APP_EUREKA_PASSWORD: p
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      config-server:
        condition: service_started

  recommendation:
    build: recommendation
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      MONGO_RECOMMENDATION_URL: mongodb
      MONGO_RECOMMENDATION_DATABASE: recommendation-db
      KAFKA_BROKER: kafka
      KAFKA_PORT: 9092
      APP_EUREKA_SERVER: eureka-server
      APP_EUREKA_USERNAME: u
      APP_EUREKA_PASSWORD: p
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      config-server:
        condition: service_started

  review:
    build: review
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      MYSQL_REVIEW_URL: jdbc:mysql://mysql/review-db
      MYSQL_REVIEW_USER: user
      MYSQL_REVIEW_PWD: pwd
      KAFKA_BROKER: kafka
      KAFKA_PORT: 9092
      APP_EUREKA_SERVER: eureka-server
      APP_EUREKA_USERNAME: u
      APP_EUREKA_PASSWORD: p
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
      config-server:
        condition: service_started

  composite-product:
    build: composite-product
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      # Only needed without Eureka-Server
      #APP_PRODUCT_SERVICE_URL: product
      #APP_RECOMMENDATION_SERVICE_URL: recommendation
      #APP_REVIEW_SERVICE_URL: review
      KAFKA_BROKER: kafka
      KAFKA_PORT: 9092
      APP_EUREKA_SERVER: eureka-server
      APP_EUREKA_USERNAME: u
      APP_EUREKA_PASSWORD: p
      APP_KEYCLOAK_SERVER: host.docker.internal:8989
      APP_KEYCLOAK_REALM: mps
    depends_on:
      kafka:
        condition: service_started
      config-server:
        condition: service_started

volumes:
  microservice-mongo-data:
  microservice-mysql-data:
  keycloak-pg-data: